<html>

<head>
<title>CMSIS Version History</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<style>
<!--
/*-----------------------------------------------------------
Keil Software CHM Style Sheet
-----------------------------------------------------------*/
body         { color: #000000; background-color: #FFFFFF; font-size: 75%; font-family: 
               Verdana, Arial, 'Sans Serif' }
a:link       { color: #0000FF; text-decoration: underline }
a:visited    { color: #0000FF; text-decoration: underline }
a:active     { color: #FF0000; text-decoration: underline }
a:hover      { color: #FF0000; text-decoration: underline }
h1           { font-family: Verdana; font-size: 18pt; color: #000080; font-weight: bold; 
               text-align: Center; margin-right: 3 }
h2           { font-family: Verdana; font-size: 14pt; color: #000080; font-weight: bold; 
               background-color: #CCCCCC; margin-top: 24; margin-bottom: 3; 
               padding: 6 }
h3           { font-family: Verdana; font-size: 10pt; font-weight: bold; background-color: 
               #CCCCCC; margin-top: 24; margin-bottom: 3; padding: 6 }
pre          { font-family: Courier New; font-size: 10pt; background-color: #CCFFCC; 
               margin-left: 24; margin-right: 24 }
ul           { list-style-type: square; margin-top: 6pt; margin-bottom: 0 }
ol           { margin-top: 6pt; margin-bottom: 0 }
li           { clear: both; margin-bottom: 6pt }
table        { font-size: 100%; border-width: 0; padding: 0 }
th           { color: #FFFFFF; background-color: #000080; text-align: left; vertical-align: 
               bottom; padding-right: 6pt }
tr           { text-align: left; vertical-align: top }
td           { text-align: left; vertical-align: top; padding-right: 6pt }
.ToolT       { font-size: 8pt; color: #808080 }
.TinyT       { font-size: 8pt; text-align: Center }
code         { color: #000000; background-color: #E0E0E0; font-family: 'Courier New', Courier; 
               line-height: 120%; font-style: normal }
/*-----------------------------------------------------------
Notes
-----------------------------------------------------------*/
p.note       { font-weight: bold; clear: both; margin-bottom: 3pt; padding-top: 6pt }
/*-----------------------------------------------------------
Expanding/Contracting Divisions
-----------------------------------------------------------*/
#expand      { text-decoration: none; margin-bottom: 3pt }
img.expand   { border-style: none; border-width: medium }
div.expand   { display: none; margin-left: 9pt; margin-top: 0 }
/*-----------------------------------------------------------
Where List Tags
-----------------------------------------------------------*/
p.wh         { font-weight: bold; clear: both; margin-top: 6pt; margin-bottom: 3pt }
table.wh     { width: 100% }
td.whItem    { white-space: nowrap; font-style: italic; padding-right: 6pt; padding-bottom: 
               6pt }
td.whDesc    { padding-bottom: 6pt }
/*-----------------------------------------------------------
Keil Table Tags
-----------------------------------------------------------*/
table.kt     { border: 1pt solid #000000 }
th.kt        { white-space: nowrap; border-bottom: 1pt solid #000000; padding-left: 6pt; 
               padding-right: 6pt; padding-top: 4pt; padding-bottom: 4pt }
tr.kt        {  }
td.kt        { color: #000000; background-color: #E0E0E0; border-top: 1pt solid #A0A0A0; 
               padding-left: 6pt; padding-right: 6pt; padding-top: 2pt; 
               padding-bottom: 2pt }
/*-----------------------------------------------------------
-----------------------------------------------------------*/
-->

</style>
</head>

<body>

<h1>CMSIS Version History</h1>
<p align="center">This document describes the changes between the different CMSIS versions.</p>
<p align="center">Version: 2.10 - July 2011</p>

<p class="TinyT">Information in this file, the accompany manuals, and software is<br>
                 Copyright © ARM Ltd.<br>All rights reserved.
</p>

<hr>


<h2>Contents</h2>

<ol>
  <li class="LI2"><a href="#Toolchain">Used Toolchains</a></li>
  <li class="LI2"><a href="#6">Changes to version V2.00</a></li>
  <li class="LI2"><a href="#5">Changes to version V1.30</a></li>
  <li class="LI2"><a href="#4">Changes to version V1.20</a></li>
  <li class="LI2"><a href="#2">Open Points</a></li>
  <li class="LI2"><a href="#1">Limitations</a></li>
</ol>


<h2><a name="Toolchain"></a>Used Toolchains</h2>
<p>
  Following toolchains have been used for test / verification:</i>.
</p>
  <ul>
    <li>ARM: MDK-ARM Version 4.21</li>
    <li>GNU: Sourcery G++ Lite Edition for ARM 2010.09-51</li>
    <li>IAR: IAR Embedded Workbench Kickstart Edition V6.10</li>
  </ul>


<h2><a name="6"></a>Changes to version V2.00</h2>

<h3>Added CMSIS DSP Software Library support for Cortex-M0 based MCUs</h3>
<p>
  The <strong>CMSIS DSP Software Library</strong> provides now also libraries and examples for Cortex-M0.
</p>
<p>
  For more information refer to <i>CMSIS DSP Library documentation</i>.
</p>

<h3>Added big endian support for DSP library</h3>
<p>
  The <strong>CMSIS DSP Software Library</strong> provides now also pre-build libraries 
	and projects for big endian devices.
</p>
<p>
  For more information refer to <i>CMSIS DSP Library documentation</i>.
</p>


<h3>Simplified folder structure for CMSIS include files</h3>
<p>
  All CMSIS core include files as well as the DSP-Library header files are located in 
	a single folder <strong>./CMSIS/Include</strong>.
</p>

<h3>Changed folder structure for Device Support packages</h3>
<p>
  Device Support packages are expected to be in folder <strong>./Device</strong> located at the
  same level as <strong>./CMSIS</strong>.
</p>
<p>The new Device folder contains the following subfolders:</p>
  <ul>
     <li><b>Device</b></li>
       <ul>
         <li>&lt;<b>Vendor</b>&gt; 
           <ul>
             <li>&lt;<b>Device</b>&gt; | &lt;<b>Device Series</b>&gt;
               <ul>
                  <li><b>Include</b><br>
                      &lt;device&gt;.h<br>
                      system_&lt;device&gt;.h<br>
                  </li>
                  <li><b>Source</b>
                    <ul>
                       <li><b>Templates</b><br>
                           system_&lt;device&gt;.c<br>
                          <ul>
                             <li>&lt;<b>Toolchain</b>&gt;<br>
                                 startup_&lt;device&gt;.s<br>
                             </li>
                             <li>&lt;<b>Toolchain</b>&gt;</li>
                                <li>...</li>
                          </ul>
                       </li>
                    </ul>
                  </li>
               </ul>
             <li>&lt;<b>Device</b>&gt; | &lt;<b>Device Series</b>&gt;</li>
             <li>...</li>
           </ul>
         </li>
         <li>&lt;<b>Vendor</b>&gt;</li>
         <li>...</li>
       </ul>
     </li>
  </ul>
<p>Template files are application specific files and are required to be copied to the project prior to use!</p>

<h3>Removed CMSIS core source files</h3>
<p>
  The CMSIS core source files <strong>core_cm0.c, core_cm3.c, core_cm4.c</strong> 
  containing helper functions for older ARM compiler versions got removed.
</p>
<p>
  For the <b>ARM Compiler Toolchain </b>version <b>V4.0.677</b> or later is 
	required!</p>


<h2><a name="5"></a>Changes to version V1.30</h2>

<h3>Added CMSIS DSP Software Library</h3>
<p>
  The <strong>CMSIS DSP Software Library</strong> is a suite of common signal processing functions targeted 
  to Cortex-M processor based microcontrollers. Even though the code has been specifically 
  optimized towards using the extended DSP instruction set of the Cortex-M4 processor, 
  the library can be compiled for any Cortex-M processor.
</p>
<p>
  For more information see <i>CMSIS DSP Library documentation</i>.
</p>

<h3>Added CMSIS System View Description</h3>
<p>
  The <strong>CMSIS System View Description</strong> answers the challenges of accurate, detailed and 
  timely device aware peripheral debugging support for Cortex Microcontroller based 
  devices by the software development tools vendor community.
</p>
<p>
  Silicon vendors shall create and maintain a formalized description of the debug view 
  for all the peripherals contained in their Cortex Microcontroller based devices.
  Tool vendors use such descriptions to establish device specific debug support in 
  their debugging tools.
</p>
<p>
  A standardized System View Description shall provide a common approach to 
  capturing peripheral debug related information in a machine readable files.
</p>
<p>
  For more information see <i>CMSIS System View Description</i>.
</p>

<h3>Added Cortex-M4 Core Support</h3>
<p>
  Additional folder <strong>CM4</strong>, containing the Cortex-M4 core support files, has been added.
</p>
  <ul>
    <li>CM0</li>
    <li>CM3</li>
    <li>CM4
       <ul>
         <li>CoreSupport</li>
         <li>DeviceSupport</li>
       </ul>
    </li>
  </ul>

<h3>New naming for Core Support Files</h3>
<p>
  The new Core Support Files are:
</p>
<ul>
  <li>core_cm#.h  (# = 0, 3, 4)</li>
  <li>core_cmFunc.h  (Cortex-M Core Register access functions)</li>
  <li>core_cmInstr.h  (Cortex-M Core instructions)</li>
  <li>core_cm4_simd.h (Cortex-M4 SIMD instructions)</li>
</ul>

<h2><a name="4"></a>Changes to version V1.20</h2>

<h3>Removed CMSIS Middelware packages</h3>
<p>
  CMSIS Middleware is removed and no longer focus of CMSIS.
</p>

<h3>SystemFrequency renamed to SystemCoreClock</h3>
<p>
  The variable name <strong>SystemCoreClock</strong> is more precise than <strong>SystemFrequency</strong>
  because the variable holds the clock value at which the core is running.
</p>

<h3>Changed startup concept</h3>
<p>
  The old startup concept (calling SystemInit_ExtMemCtl from startup file and calling SystemInit 
  from main) has the weakness that it does not work for controllers which need a already 
  configuerd clock system to configure the external memory controller.
</p>

<h5>Changed startup concept</h5>
<ul>
  <li>
    SystemInit() is called from startup file before <strong>premain</strong>.
  </li>
  <li>
    <strong>SystemInit()</strong> configures the clock system and also configures
    an existing external memory controller.
  </li>
  <li>
    <strong>SystemInit()</strong> must not use global variables.
  </li>
  <li>
    <strong>SystemCoreClock</strong> is initialized with a correct predefined value.
  </li>
  <li>
    Additional function <strong>void SystemCoreClockUpdate (void)</strong> is provided.<br>
   <strong>SystemCoreClockUpdate()</strong> updates the variable <strong>SystemCoreClock</strong>
   and must be called whenever the core clock is changed.<br>
   <strong>SystemCoreClockUpdate()</strong> evaluates the clock register settings and calculates
   the current core clock.
  </li>
</ul>
      

<h3>Advanced Debug Functions</h3>
<p>
  ITM communication channel is only capable for OUT direction. To allow also communication for
  IN direction a simple concept is provided.
</p>
<ul>
  <li>
    Global variable <strong>volatile int ITM_RxBuffer</strong> used for IN data.
  </li>
  <li>
    Function <strong>int ITM_CheckChar (void)</strong> checks if a new character is available.
  </li>
  <li>
    Function <strong>int ITM_ReceiveChar (void)</strong> retrieves the new character.
  </li>
</ul>

<p>
  For detailed explanation see file <strong>CMSIS debug support.htm</strong>. 
</p>


<h3>Core Register Bit Definitions</h3>
<p>
  Files core_cm3.h and core_cm0.h contain now bit definitions for Core Registers. The name for the
  defines correspond with the Cortex-M Technical Reference Manual.  
</p>
<p>
  e.g. SysTick structure with bit definitions
</p>
<pre>
/** \brief  Structure type to access the System Timer (SysTick).
 */
typedef struct
{
  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
  __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register       */
  __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register      */
  __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register        */
} SysTick_Type;

/* SysTick Control / Status Register Definitions */
#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */

#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */

#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */

#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
#define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */

/* SysTick Reload Register Definitions */
#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */

/* SysTick Current Register Definitions */
#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */

/* SysTick Calibration Register Definitions */
#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */

#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */

#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */

/*@} end of group CMSIS_SysTick */</pre>

<h3>DoxyGen Tags</h3>
<p>
  DoxyGen tags in files core_cm3.[c,h] and core_cm0.[c,h] are reworked to create proper documentation
  using DoxyGen.
</p>

<h3>Folder Structure</h3>
<p>
  The folder structure is changed to differentiate the single support packages.
</p>

  <ul>
    <li>CM0</li>
    <li>CM3
       <ul>
         <li>CoreSupport</li>
         <li>DeviceSupport</li>
           <ul>
             <li>Vendor 
               <ul>
                 <li>Device
                   <ul>
                      <li>Startup
                        <ul>
                          <li>Toolchain</li>
                          <li>Toolchain</li>
                          <li>...</li>
                        </ul>
                      </li>
                   </ul>
                 </li>
                 <li>Device</li>
                 <li>...</li>
               </ul>
             </li>
             <li>Vendor</li>
             <li>...</li>
           </ul>
         </li>
         <li>Example <i>(optional)</i>
           <ul>
             <li>Toolchain 
               <ul>
                 <li>Device</li>
                 <li>Device</li>
                 <li>...</li>
               </ul>
             </li>
             <li>Toolchain</li>
             <li>...</li>
           </ul>
         </li>
       </ul>
    </li>
     
    <li>Documentation</li>
  </ul>

<h2><a name="2"></a>Open Points</h2>
<p>
  Following points need to be clarified and solved:
</p>
<ul>
  <li>
    <p>
      Equivalent C and Assembler startup files.
    </p>
    <p>
      Is there a need for having C startup files although assembler startup files are
      very efficient and do not need to be changed?
    <p/>
  </li>
  <li>
    <p>
      Placing of HEAP in external RAM.
    </p>
    <p>
      It must be possible to place HEAP in external RAM if the device supports an 
      external memory controller.
    </p>
  </li>
  <li>
    <p>
      Placing of STACK /HEAP.
    </p>
    <p>
      STACK should always be placed at the end of internal RAM.
    </p>
    <p>
      If HEAP is placed in internal RAM than it should be placed after RW ZI section.
    </p>
  </li>
</ul>


<h2><a name="1"></a>Limitations</h2>
<p>
  The following limitations are not covered with the current CMSIS version:
</p>
<ul>
 <li>
  No <strong>C startup files</strong> are available. 
 </li>
</ul>

